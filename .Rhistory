rep("circle",length(bacteria.time)/2)),
vertex.color = c(rep(phage.color,length(phage.time)),
rep(bac.color,length(bacteria.time)/2),
rep(bac.color2,length(bacteria.time)/2)),
vertex.frame.color = c(rep("black",length(phage.time)),
rep("black",length(bacteria.time)/2),
rep("black",length(bacteria.time)/2)),
edge.color = "grey20",edge.width = 5*wts,
edge.arrow.mode = 0,layout = locs,
main = "N-limited",
xlab = list("Time (d)", cex = 1.25, font = 2),asp = 0, ylim = c(-1.2,1))
# draw scaled axes
xs <- c(0,40,80, 120, 160)
scaled.xs <- 2*(xs - min(locs[,1]))/(max(locs[,1]) - min(locs[,1])) - 1
axis(1,at = scaled.xs,labels = xs, cex = 1.15)
axis(2, at = c(-1,0,1),labels = c("host \n(+ phage)","phage","host \n(- phage)"),cex.axis = 1,font = 1, las = 1)
box(lwd = 2)
### PL treatment
par(mar = c(4,1,3,6)+0.1)
# construct and populate adjacency matrix
size <- 1*dim(Pcon)[[1]] + 2*dim(Ptrt)[[2]]
mat <- matrix(0, nrow = size, ncol = size)
#mat
# for multiple bacteria, single phage
mat[1:dim(Pcon)[[1]],I(dim(Pcon)[[1]]+1):I(dim(Pcon)[[1]] + dim(Pcon)[[2]])] <- as.matrix(Ptrt)
mat[1:dim(Pcon)[[1]],I(dim(Pcon)[[1]]+dim(Pcon)[[2]]+1):dim(mat)[[2]]] <- as.matrix(Pcon)
# convert adjacency matrix into graph object
g2 <- graph.adjacency(mat,mode="directed",weighted=T)
# extract weights
#wts <- g2[[9]][[4]]$weight
wts <- E(g2)$weight
# create layout matrix
locs <- cbind(c(phage.time,bacteria.time),c(rep(0,length(phage.time)),rep(-1,length(bacteria.time)/2),rep(1,length(bacteria.time)/2)))
#plot options
phage.color = "black"; bac.color = "white"; bac.color2 = "grey"
coevo.shape = "circle"; control.shape = "square"
# create plot
plot(g2,
#vertex.size = sq.dim,
#vertex.label.color = "black",
vertex.label = NA,
vertex.shape = c(rep("square",length(phage.time)),
rep("circle",length(bacteria.time)/2),
rep("circle",length(bacteria.time)/2)),
vertex.color = c(rep(phage.color,length(phage.time)),
rep(bac.color,length(bacteria.time)/2),
rep(bac.color2,length(bacteria.time)/2)),
vertex.frame.color = c(rep("black",length(phage.time)),
rep("black",length(bacteria.time)/2),
rep("black",length(bacteria.time)/2)),
edge.color = "grey20",edge.width = 5*wts,
edge.arrow.mode = 0,layout = locs,
main = "P-limited",
xlab = list("Time (d)", cex = 1.25, font = 2),
asp = 0,ylim = c(-1.2,1))
# draw scaled axes
xs <- c(0,40,80, 120, 160)
scaled.xs <- 2*(xs - min(locs[,1]))/(max(locs[,1]) - min(locs[,1])) - 1
axis(1,at = scaled.xs,labels = xs, cex = 1)
axis(4, at = c(-1,0,1),labels = c("host \n(+ phage)","phage","host \n(- phage)"),cex.axis = 1,font = 1, las = 1)
box(lwd = 2)
dev.off()
#pdf(file = "./supporting-files/pub-figures/Fig3-CoEvoDynamics_Revised.pdf",width=8.5,height=4,pointsize = 10, family ="sans")
tiff(filename = "./figures/Fig2-CoEvoDynamics_Revised.tiff",
width = 1140, height = 570, units = "px", pointsize = 13,
bg = "white", res = 100)
par(mfrow = c(1,2))
par(mar = c(4,6,3,1)+0.1)
#Option 2
# construct and populate adjacency matrix
size <- 1*dim(Ncon)[[1]]+2*dim(Ntrt)[[2]]
mat <- matrix(0,nrow = size,ncol = size)
#mat
# for multiple bacteria, single phage
mat[1:dim(Ncon)[[1]],I(dim(Ncon)[[1]]+1):I(dim(Ncon)[[1]]+dim(Ncon)[[2]])] <-as.matrix(Ntrt)
mat[1:dim(Ncon)[[1]],I(dim(Ncon)[[1]]+dim(Ncon)[[2]]+1):dim(mat)[[2]]] <- as.matrix(Ncon)
# convert adjacency matrix into graph object
g2 <- graph.adjacency(mat,mode="directed",weighted=T)
# extract weights
#wts <- g2[[9]][[4]]$weight
wts <- E(g2)$weight
# create layout matrix
locs <- cbind(c(phage.time,bacteria.time),c(rep(0,length(phage.time)),rep(-1,length(bacteria.time)/2),rep(1,length(bacteria.time)/2)))
#plot options
phage.color = "black"; bac.color = "white"; bac.color2 = "grey"
#coevo.shape = "circle"; control.shape = "square"
# create plot
plot(g2,
#vertex.size = sq.dim,
#vertex.label.color = "black",
vertex.label = NA,
vertex.shape = c(rep("square",length(phage.time)),
rep("circle",length(bacteria.time)/2),
rep("circle",length(bacteria.time)/2)),
vertex.color = c(rep(phage.color,length(phage.time)),
rep(bac.color,length(bacteria.time)/2),
rep(bac.color2,length(bacteria.time)/2)),
vertex.frame.color = c(rep("black",length(phage.time)),
rep("black",length(bacteria.time)/2),
rep("black",length(bacteria.time)/2)),
edge.color = "grey20",edge.width = 5*wts,
edge.arrow.mode = 0,layout = locs,
main = "N-limited",
xlab = list("Time (d)", cex = 1.25, font = 2),asp = 0, ylim = c(-1.2,1))
# draw scaled axes
xs <- c(0,40,80, 120, 160)
scaled.xs <- 2*(xs - min(locs[,1]))/(max(locs[,1]) - min(locs[,1])) - 1
axis(1,at = scaled.xs,labels = xs, cex = 1.15)
axis(2, at = c(-1,0,1),labels = c("host \n(+ phage)","phage","host \n(- phage)"),cex.axis = 1,font = 1, las = 1)
box(lwd = 2)
### PL treatment
par(mar = c(4,1,3,6)+0.1)
# construct and populate adjacency matrix
size <- 1*dim(Pcon)[[1]] + 2*dim(Ptrt)[[2]]
mat <- matrix(0, nrow = size, ncol = size)
#mat
# for multiple bacteria, single phage
mat[1:dim(Pcon)[[1]],I(dim(Pcon)[[1]]+1):I(dim(Pcon)[[1]] + dim(Pcon)[[2]])] <- as.matrix(Ptrt)
mat[1:dim(Pcon)[[1]],I(dim(Pcon)[[1]]+dim(Pcon)[[2]]+1):dim(mat)[[2]]] <- as.matrix(Pcon)
# convert adjacency matrix into graph object
g2 <- graph.adjacency(mat,mode="directed",weighted=T)
# extract weights
#wts <- g2[[9]][[4]]$weight
wts <- E(g2)$weight
# create layout matrix
locs <- cbind(c(phage.time,bacteria.time),c(rep(0,length(phage.time)),rep(-1,length(bacteria.time)/2),rep(1,length(bacteria.time)/2)))
#plot options
phage.color = "black"; bac.color = "white"; bac.color2 = "grey"
coevo.shape = "circle"; control.shape = "square"
# create plot
plot(g2,
#vertex.size = sq.dim,
#vertex.label.color = "black",
vertex.label = NA,
vertex.shape = c(rep("square",length(phage.time)),
rep("circle",length(bacteria.time)/2),
rep("circle",length(bacteria.time)/2)),
vertex.color = c(rep(phage.color,length(phage.time)),
rep(bac.color,length(bacteria.time)/2),
rep(bac.color2,length(bacteria.time)/2)),
vertex.frame.color = c(rep("black",length(phage.time)),
rep("black",length(bacteria.time)/2),
rep("black",length(bacteria.time)/2)),
edge.color = "grey20",edge.width = 5*wts,
edge.arrow.mode = 0,layout = locs,
main = "P-limited",
xlab = list("Time (d)", cex = 1.25, font = 2),
asp = 0,ylim = c(-1.2,1))
# draw scaled axes
xs <- c(0,40,80, 120, 160)
scaled.xs <- 2*(xs - min(locs[,1]))/(max(locs[,1]) - min(locs[,1])) - 1
axis(1,at = scaled.xs,labels = xs, cex = 1)
axis(4, at = c(-1,0,1),labels = c("host \n(+ phage)","phage","host \n(- phage)"),cex.axis = 1,font = 1, las = 1)
box(lwd = 2)
dev.off()
par(mfrow = c(1,2))
par(mar = c(4,6,3,1)+0.1)
#Option 2
# construct and populate adjacency matrix
size <- 1*dim(Ncon)[[1]]+2*dim(Ntrt)[[2]]
mat <- matrix(0,nrow = size,ncol = size)
#mat
# for multiple bacteria, single phage
mat[1:dim(Ncon)[[1]],I(dim(Ncon)[[1]]+1):I(dim(Ncon)[[1]]+dim(Ncon)[[2]])] <-as.matrix(Ntrt)
mat[1:dim(Ncon)[[1]],I(dim(Ncon)[[1]]+dim(Ncon)[[2]]+1):dim(mat)[[2]]] <- as.matrix(Ncon)
# convert adjacency matrix into graph object
g2 <- graph.adjacency(mat,mode="directed",weighted=T)
# extract weights
#wts <- g2[[9]][[4]]$weight
wts <- E(g2)$weight
# create layout matrix
locs <- cbind(c(phage.time,bacteria.time),c(rep(0,length(phage.time)),rep(-1,length(bacteria.time)/2),rep(1,length(bacteria.time)/2)))
#plot options
phage.color = "black"; bac.color = "white"; bac.color2 = "grey"
#coevo.shape = "circle"; control.shape = "square"
# create plot
plot(g2,
#vertex.size = sq.dim,
#vertex.label.color = "black",
vertex.label = NA,
vertex.shape = c(rep("square",length(phage.time)),
rep("circle",length(bacteria.time)/2),
rep("circle",length(bacteria.time)/2)),
vertex.color = c(rep(phage.color,length(phage.time)),
rep(bac.color,length(bacteria.time)/2),
rep(bac.color2,length(bacteria.time)/2)),
vertex.frame.color = c(rep("black",length(phage.time)),
rep("black",length(bacteria.time)/2),
rep("black",length(bacteria.time)/2)),
edge.color = "grey20",edge.width = 5*wts,
edge.arrow.mode = 0,layout = locs,
main = "N-limited",
xlab = list("Time (d)", cex = 1.25, font = 2),asp = 0, ylim = c(-1.2,1))
# draw scaled axes
xs <- c(0,40,80, 120, 160)
scaled.xs <- 2*(xs - min(locs[,1]))/(max(locs[,1]) - min(locs[,1])) - 1
axis(1,at = scaled.xs,labels = xs, cex = 1.15)
axis(2, at = c(-1,0,1),labels = c("host \n(+ phage)","phage","host \n(- phage)"),cex.axis = 1,font = 1, las = 1)
box(lwd = 2)
### PL treatment
par(mar = c(4,1,3,6)+0.1)
# construct and populate adjacency matrix
size <- 1*dim(Pcon)[[1]] + 2*dim(Ptrt)[[2]]
mat <- matrix(0, nrow = size, ncol = size)
#mat
# for multiple bacteria, single phage
mat[1:dim(Pcon)[[1]],I(dim(Pcon)[[1]]+1):I(dim(Pcon)[[1]] + dim(Pcon)[[2]])] <- as.matrix(Ptrt)
mat[1:dim(Pcon)[[1]],I(dim(Pcon)[[1]]+dim(Pcon)[[2]]+1):dim(mat)[[2]]] <- as.matrix(Pcon)
# convert adjacency matrix into graph object
g2 <- graph.adjacency(mat,mode="directed",weighted=T)
# extract weights
#wts <- g2[[9]][[4]]$weight
wts <- E(g2)$weight
# create layout matrix
locs <- cbind(c(phage.time,bacteria.time),c(rep(0,length(phage.time)),rep(-1,length(bacteria.time)/2),rep(1,length(bacteria.time)/2)))
#plot options
phage.color = "black"; bac.color = "white"; bac.color2 = "grey"
coevo.shape = "circle"; control.shape = "square"
# create plot
plot(g2,
#vertex.size = sq.dim,
#vertex.label.color = "black",
vertex.label = NA,
vertex.shape = c(rep("square",length(phage.time)),
rep("circle",length(bacteria.time)/2),
rep("circle",length(bacteria.time)/2)),
vertex.color = c(rep(phage.color,length(phage.time)),
rep(bac.color,length(bacteria.time)/2),
rep(bac.color2,length(bacteria.time)/2)),
vertex.frame.color = c(rep("black",length(phage.time)),
rep("black",length(bacteria.time)/2),
rep("black",length(bacteria.time)/2)),
edge.color = "grey20",edge.width = 5*wts,
edge.arrow.mode = 0,layout = locs,
main = "P-limited",
xlab = list("Time (d)", cex = 1.25, font = 2),
asp = 0,ylim = c(-1.2,1))
# draw scaled axes
xs <- c(0,40,80, 120, 160)
scaled.xs <- 2*(xs - min(locs[,1]))/(max(locs[,1]) - min(locs[,1])) - 1
axis(1,at = scaled.xs,labels = xs, cex = 1)
axis(4, at = c(-1,0,1),labels = c("host \n(+ phage)","phage","host \n(- phage)"),cex.axis = 1,font = 1, las = 1)
box(lwd = 2)
setwd("C:/Users/meglarse/GitHub/ToxTrends/")
knitr::opts_chunk$set(fig.width=7, fig.height=8,
echo = FALSE, warning = FALSE, message = FALSE)
require(ggplot2);require(gridExtra);require(pander);require(reshape2)
theme_std <- function (base_size = 12, base_family = "")
{
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(axis.ticks = element_line(colour = "black"),
legend.key = element_rect(colour = "grey80"),
panel.background = element_rect(fill = "white", colour = NA),
panel.border = element_rect(fill = NA, colour = "grey50"),
panel.grid.major = element_line(NA),
panel.grid.minor = element_line(NA),
strip.background = element_rect(fill = "grey80", colour = "grey50", size = 0.2),
axis.text  = element_text(size=rel(1.25)),
axis.title = element_text(colour="black", size=rel(1.5),
margin = margin(20,25,15,15), face = "bold"),
strip.text = element_text(size = rel(1.15), colour = "black", face = "bold")
)
}
theme_set(theme_std())
test.plot <- ggplot(mtcars, aes(x = hp , y = mpg)) +
geom_point()
#print(test.plot)
smp.points <- read.csv("./data/sitedescriptions.csv")
noaa.dat <- read.csv("./data/noaa_data.csv", header = TRUE)
stations.table <- smp.points[,c("OrganizationFormalName","LakeName","MonitoringLocationIdentifier","LatitudeMeasure","LongitudeMeasure")]
colnames(stations.table)<-c("Organization","Lake","Location ID","Latitude","Longitude")
pander(stations.table)
#write.table(stations.table, file = "./supporting-files/Table_stationslist.txt", sep = ",", quote = FALSE, row.names = FALSE)
dat <- read.csv("./data/result.csv", header = TRUE)
# Do some data cleanup for this analysis
dat$ResultMeasureValue <- as.numeric(as.character(dat$ResultMeasureValue))
## Convert ActivityStartDate to a Juilan value to look at annual and decadal patterns
require(lubridate)
require(ggplot2)
dat$tmp <- as.Date(dat$ActivityStartDate, format = "%Y-%m-%d") #Converts data to date structure
dat$yr <- as.numeric(format(dat$tmp,'%Y'))         #Time is
dat$yr.fac <- as.factor(as.numeric(format(dat$tmp,'%Y')))         #Time is now numeric
dat$mo <- as.factor(format(dat$tmp,'%m'))
dat$jul.dat <- yday(dat$tmp)                                  #Time is now in Julian
dat$wk <- week(dat$tmp)
dat <- dat[dat$ActivityMediaName != "Sediment",]
## Subset the microcystins data
bmp <- dat[dat$CharacteristicName == "Microcystin" &
dat$OrganizationIdentifier == "21NEB001_WQX",]
## NDEQ sites of interest
sites <- c("21NEB001_WQX-LLP1FRMT2004","21NEB001_WQX-LLP1FRMT2005","21NEB001_WQX-LLP2PAWNEE03","21NEB001_WQX-LLP2PAWNEE05", "21NEB001_WQX-LMT1CARTER03")
bmp <- bmp[bmp$MonitoringLocationIdentifier %in% sites,]
# Remove quality control samples
bmp <- bmp[bmp$ActivityTypeCode != "Quality Control Sample-Lab Blank" & bmp$ActivityTypeCode != "Quality Control Sample-Field Replicate",]
# Subset for the 2005-2015 decade
bmp <- bmp[bmp$yr != 2004,]
# detection limit is 0.15, change all values less than 0.15 to 0
bmp$ResultMeasureValue[bmp$ResultMeasureValue <0.15] <- 0
bmp.paw <- bmp[grep("PAW", bmp$MonitoringLocationIdentifier),]
bmp.fre <- bmp[grep("FRM", bmp$MonitoringLocationIdentifier),]
bmp.car <- bmp[grep("CAR", bmp$MonitoringLocationIdentifier),]
annual.paw = ggplot(bmp.paw, aes(yr,ResultMeasureValue)) +
ylim(0,80) +
scale_x_continuous(breaks = c(2005,2007,2009,2011,2013,2015)) +
geom_hline(yintercept = 20, col = "red", lty = 1, lwd = 1) +
#geom_hline(yintercept = 4, col = "black", lty = 1, lwd = 1) +
geom_jitter(cex = 1, col = "grey50", width = 0.2, height = 0.1)  +
stat_summary(fun.data = "mean_cl_boot", color = "black", size = 1) +
xlab("Year") + theme(axis.title.y = element_blank()) +
annotate("text", y = Inf, x = Inf, label = "Pawnee Lake", vjust = 2, hjust = 1.25)
#print(annual.paw)
annual.fre = ggplot(bmp.fre, aes(yr,ResultMeasureValue)) +
ylim(0,80) +
scale_x_continuous(breaks = c(2005,2007,2009,2011,2013,2015)) +
geom_hline(yintercept = 20, col = "red", lty = 1, lwd = 1) +
#geom_hline(yintercept = 4, col = "black", lty = 1, lwd = 1) +
geom_jitter(cex = 1, col = "grey50", width = 0.2, height = 0.1)  +
stat_summary(fun.data = "mean_cl_boot", color = "black", size = 1) +
xlab("Year") + theme(axis.title.y = element_blank()) +
annotate("text", y = Inf, x = Inf, label = "Fremont Lake No. 20", vjust = 2, hjust = 1.15)
#print(annual.fre)
annual.car = ggplot(bmp.car, aes(yr,ResultMeasureValue)) +
ylim(0,80) +
scale_x_continuous(breaks = c(2005,2007,2009,2011,2013,2015)) +
geom_hline(yintercept = 20, col = "red", lty = 1, lwd = 1) +
#geom_hline(yintercept = 4, col = "black", lty = 1, lwd = 1) +
geom_jitter(cex = 1, col = "grey50", width = 0.2, height = 0.1) +
stat_summary(fun.data = "mean_cl_boot", color = "black", size = 1) +
xlab("Year") +
annotate("text", y = Inf, x = Inf, label = "Carter Lake", vjust = 2, hjust = 1.25)+
theme(axis.title.y = element_blank())
#print(annual.car)
grid.arrange(annual.paw,annual.fre, annual.car, ncol = 1)
#Notes:
# -- Add lake labels to plots
# -- add polygons to highlight study years
#Q: What percentage of samples had detectable microcystins (> 0.15 $\mu$/L for ELISA? What percentage of samples had total microcystin concentrations exceeding the WHO limit?
## What percentage of samples have detectable microcystins
#For each location > for each year > for each month within a year
loc.list1 <- c()
loc.list2 <-c()
yr.list1 <- c()
yr.list2 <- c()
mo.list <- c()
yr.perc.list <- c()
mo.perc.list <- c()
yr.above.list <-c()
yr.total.list <-c()
mo.above.list <-c()
mo.total.list <-c()
for(i in unique(bmp$MonitoringLocationIdentifier)){
tmp <- bmp[bmp$MonitoringLocationIdentifier == i,]
for(j in unique(tmp$yr.fac)){
yr.above <- dim(tmp[tmp$yr.fac == j & tmp$ResultMeasureValue >= 0.15,])[1]
yr.total <- dim(tmp[tmp$yr.fac == j,])[1]
yr.perc <- round((yr.above/yr.total)*100, digits = 2)
yr.above.list <- append(yr.above.list, yr.above)
yr.total.list <- append(yr.total.list, yr.total)
yr.list1 <- append(yr.list1, rep(j,length(yr.perc)))
yr.perc.list <- append(yr.perc.list, yr.perc)
loc.list1 <- append(loc.list1, rep(i, length(yr.perc)))
for(k in unique(tmp$mo)){
tmp2 <- tmp[tmp$mo == k & tmp$yr.fac == j,]
mo.above <- dim(tmp2[tmp2$ResultMeasureValue >= 0.15,])[1]
mo.total <- dim(tmp2)[1]
mo.perc <- round((mo.above/mo.total)*100, digits = 2)
mo.above.list <- append(mo.above.list, mo.above)
mo.total.list <- append(mo.total.list, mo.total)
yr.list2 <- append(yr.list2, rep(j, length(mo.perc)))
mo.list <- append(mo.list, rep(k, length(mo.perc)))
mo.perc.list <- append(mo.perc.list, mo.perc)
loc.list2 <- append(loc.list2, rep(i, length(mo.perc)))
}
}
}
yr.perc <- data.frame(loc.list1, yr.list1, yr.above.list, yr.total.list,yr.perc.list)
mo.perc <- data.frame(loc.list2, yr.list2, mo.list,
mo.above.list, mo.total.list,mo.perc.list)
# information summary
yr.ag1 <- aggregate(yr.above.list ~ loc.list1, data = yr.perc, sum)
yr.ag2 <- aggregate(yr.total.list ~ loc.list1, data = yr.perc, sum)
#For each location > for each year > for each month within a year
loc.list1 <- c()
loc.list2 <-c()
yr.list1 <- c()
yr.list2 <- c()
mo.list <- c()
yr.perc.list <- c()
mo.perc.list <- c()
yr.above.list <-c()
yr.total.list <-c()
mo.above.list <-c()
mo.total.list <-c()
for(i in unique(bmp$MonitoringLocationIdentifier)){
tmp <- bmp[bmp$MonitoringLocationIdentifier == i,]
for(j in unique(tmp$yr.fac)){
yr.above <- dim(tmp[tmp$yr.fac == j & tmp$ResultMeasureValue >= 20,])[1]
yr.total <- dim(tmp[tmp$yr.fac == j,])[1]
yr.percent <- round((yr.above/yr.total)*100, digits = 2)
yr.above.list <- append(yr.above.list, yr.above)
yr.total.list <- append(yr.total.list, yr.total)
yr.list1 <- append(yr.list1, rep(j,length(yr.percent)))
yr.perc.list <- append(yr.perc.list, yr.percent)
loc.list1 <- append(loc.list1, rep(i, length(yr.percent)))
for(k in unique(tmp$mo)){
tmp2 <- tmp[tmp$mo == k & tmp$yr.fac == j,]
mo.above <- dim(tmp2[tmp2$ResultMeasureValue >= 20,])[1]
mo.total <- dim(tmp2)[1]
mo.percent <- round((mo.above/mo.total)*100, digits = 2)
mo.above.list <- append(mo.above.list, mo.above)
mo.total.list <- append(mo.total.list, mo.total)
yr.list2 <- append(yr.list2, rep(j, length(mo.percent)))
mo.list <- append(mo.list, rep(k, length(mo.percent)))
mo.perc.list <- append(mo.perc.list, mo.percent)
loc.list2 <- append(loc.list2, rep(i, length(mo.percent)))
}
}
}
yr.perc2 <- data.frame(loc.list1, yr.list1,
yr.above.list, yr.total.list,
yr.perc.list)
mo.perc2 <- data.frame(loc.list2, yr.list2, mo.list,
mo.above.list, mo.total.list,
mo.perc.list)
yr.perc2.ag1 <- aggregate(yr.above.list ~ loc.list1, data = yr.perc2, sum)
yr.perc2.ag2 <- aggregate(yr.total.list ~ loc.list1, data = yr.perc2, sum)
#For each location > for each year > for each month within a year
loc.list1 <- c()
loc.list2 <-c()
yr.list1 <- c()
yr.list2 <- c()
mo.list <- c()
yr.perc.list <- c()
mo.perc.list <- c()
yr.above.list <-c()
yr.total.list <-c()
mo.above.list <-c()
mo.total.list <-c()
for(i in unique(bmp$MonitoringLocationIdentifier)){
tmp <- bmp[bmp$MonitoringLocationIdentifier == i,]
for(j in unique(tmp$yr.fac)){
yr.above <- dim(tmp[tmp$yr.fac == j & tmp$ResultMeasureValue >= 4,])[1]
yr.total <- dim(tmp[tmp$yr.fac == j,])[1]
yr.percent <- round((yr.above/yr.total)*100, digits = 2)
yr.above.list <- append(yr.above.list, yr.above)
yr.total.list <- append(yr.total.list, yr.total)
yr.list1 <- append(yr.list1, rep(j,length(yr.percent)))
yr.perc.list <- append(yr.perc.list, yr.percent)
loc.list1 <- append(loc.list1, rep(i, length(yr.percent)))
for(k in unique(tmp$mo)){
tmp2 <- tmp[tmp$mo == k & tmp$yr.fac == j,]
mo.above <- dim(tmp2[tmp2$ResultMeasureValue >= 4,])[1]
mo.total <- dim(tmp2)[1]
mo.percent <- round((mo.above/mo.total)*100, digits = 2)
mo.above.list <- append(mo.above.list, mo.above)
mo.total.list <- append(mo.total.list, mo.total)
yr.list2 <- append(yr.list2, rep(j, length(mo.percent)))
mo.list <- append(mo.list, rep(k, length(mo.percent)))
mo.perc.list <- append(mo.perc.list, mo.percent)
loc.list2 <- append(loc.list2, rep(i, length(mo.percent)))
}
}
}
yr.perc3 <- data.frame(loc.list1, yr.list1,
yr.above.list, yr.total.list,
yr.perc.list)
mo.perc3 <- data.frame(loc.list2, yr.list2, mo.list,
mo.above.list, mo.total.list,
mo.perc.list)
yr.perc3.ag1 <- aggregate(yr.above.list ~ loc.list1, data = yr.perc3, sum)
yr.perc3.ag2 <- aggregate(yr.total.list ~ loc.list1, data = yr.perc3, sum)
# Merge data frames for detected and above limit
dat2 <- merge(yr.perc,yr.perc2, by = c("loc.list1","yr.list1"))
dat2 <- dat2[,c(1,2,5,8)]
colnames(dat2) <- c("MonitoringLocationIdentifier", "Year", "DetMic", "WHOMic")
#m1 <- melt(dat2, ids = c("MonitoringLocationIdentifier", "Year"))
#head(m1)
p = ggplot(data = dat2, aes(Year, DetMic)) +
scale_x_discrete(breaks = c(2005,2007,2009,2011,2013,2015)) +
geom_bar(stat = "identity") +
geom_bar(data = dat2, aes(Year,WHOMic),
stat = "identity", col = "white",fill = "red") +
facet_wrap(~MonitoringLocationIdentifier, ncol = 2) +
ylab("Percent Detected") +
theme(strip.text = element_text(size = rel(1.15), colour = "black"))
#p$data$MonitoringLocationIdentifier <- factor()
print(p)
#ggsave(paste("./supporting-files/mic-trends.tiff"), plot = p, scale = 1.5,
#       width = 6, height = 6, units = "in", resolution(300))
# Merge data frames for detected and above limit
dat2 <- merge(yr.perc,yr.perc2, by = c("loc.list1","yr.list1"))
dat2 <- dat2[,c(1,2,5,8)]
colnames(dat2) <- c("MonitoringLocationIdentifier", "Year", "DetMic", "WHOMic")
#m1 <- melt(dat2, ids = c("MonitoringLocationIdentifier", "Year"))
#head(m1)
p = ggplot(data = dat2, aes(Year, DetMic)) +
scale_x_discrete(breaks = c(2005,2007,2009,2011,2013,2015)) +
geom_bar(stat = "identity") +
geom_bar(data = dat2, aes(Year,WHOMic),
stat = "identity", col = "white",fill = "red") +
facet_wrap(~MonitoringLocationIdentifier, ncol = 2) +
ylab("Percent Detected") +
theme(strip.text = element_text(size = rel(1.15), colour = "black"))
#p$data$MonitoringLocationIdentifier <- factor()
print(p)
#ggsave(paste("./supporting-files/mic-trends.tiff"), plot = p, scale = 1.5,
#       width = 6, height = 6, units = "in", resolution(300))
round((sum(yr.ag1[,2])/sum(yr.ag2[,2])*100), digits = 2)
install.packages("knitcitations")
require("knitcitations")
?citep
setwd("C:/Users/meglarse/Desktop/wickham-thesis/")
